name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:



  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Build and run Docker Compose with tests
      run: |
        chmod +x exec.sh
        ./exec.sh
      env:
        DOCKER_BUILDKIT: 1

    - name: Run tests
      run: |
        echo "Running tests..."

        # Test 1: Vérification que Kong est en cours d'exécution et répond sur le port 8000
        echo "Testing Kong API Gateway..."
        for i in {1..5}; do
          if docker-compose exec -T kong curl -s http://localhost:8000 | grep 'kong'; then
            echo "Kong is up and running!"
            break
          else
            echo "Kong is not ready yet, retrying in 5s..."
            sleep 5
          fi
        done

        # Test 2: Vérification que la base de données Postgres pour Kong est accessible
        echo "Testing Postgres database for Kong..."
        docker-compose exec -T kong-db psql -U kong -d kong -c '\l'

        # Test 3: Vérification que Keycloak est en cours d'exécution et répond sur le port 8080
        echo "Testing Keycloak..."
        docker-compose exec -T keycloak curl -s http://localhost:8080 | grep 'Keycloak'

    - name: Check Docker logs on failure
      if: failure()
      run: |
        echo "Checking logs for all services..."
        docker-compose logs
      
    - name: Scan Docker Images for Vulnerabilities
      run: |
        echo "Running security scan with Trivy..."
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image kong-oidc:latest

    - name: Run End-to-End Tests
      run: |
        echo "Running End-to-End tests..."

# -------------------- Deploy Job Part ------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Verify Docker Compose installation
      run: |
        docker-compose --version

    - name: Deploy to Staging
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to staging environment..."

        # Extraire la dernière image depuis Docker Hub
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

        # docker pull ouledelbakri/kong-oidc:latest
        docker pull ouledelbakri/kong-oidc:latest

        # Arrêter les conteneurs existants et démarrer le nouveau avec la dernière image
        docker-compose down
        docker-compose up -d
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}


  security-scan:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Run OWASP ZAP scan
      uses: zaproxy/action-full-scan@v0.4.0
      with:
        target: 'http://localhost:8000'

# ---------------- Clean up --------------------

  cleanup:
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: always()
    steps:
    - name: Cleanup
      run: |
        docker-compose down
        docker system prune -af